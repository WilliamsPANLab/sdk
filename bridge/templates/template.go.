package main

import (
	"C"
	"encoding/json"
	"strings"

	"flywheel.io/sdk/api"
)

// Stub to keep go happy. Ignored in c-shared mode.
func main() {}

// CallResult holds the response to any call to the C bridge.
// Most calls will return a JSON marshaled CallResult.
type CallResult struct {

	// Success specifies whether the call succeeded.
	Success bool `json:"success"`

	// Message contains an error message. Valid IFF success is false.
	Message string `json:"message"`

	// Data contains the result of the call. Can be null.
	Data interface{} `json:"data"`
}

func makeClient(apiKey *C.char) *api.Client {
	apiKeyRaw := C.GoString(apiKey)

	// Parse the key into its components, so that we can activate some bridge-only features.
	host, port, key, err := api.ParseApiKey(apiKeyRaw)
	_ = host

	// Intentionally no error handling.
	// It is the frontend's responsibility to check the API key format.
	//
	// If the bridge is called with an invalid key, in principle the behavior is undefined.
	// In practice, you'll probably get a long, irritating NPE stack trace.
	if err != nil {
		return nil
	}

	options := []api.ApiKeyClientOption{}

	// Bridge-only feature:
	// If port number is specified, it's a non-production key; disable SSL verification.
	//
	// This is intended to only be of use to developers hacking on the SDK.
	// No production instance should EVER be on a non-443 port.
	if port != 443 {
		options = append(options, api.InsecureNoSSLVerification)
	}

	// Intentionally undocumented option: if ',InsecureUsePlaintext' is appended to the key, use HTTP.
	// This should literally never be used outside of integration tests.
	if strings.HasSuffix(key, ",InsecureUsePlaintext") {
		options = append(options, api.InsecureUsePlaintext)

		// Remove the suffix from the API key, because it's invalid
		apiKeyRaw = strings.TrimRight(apiKeyRaw, ",InsecureUsePlaintext")
	}

	return api.NewApiKeyClient(apiKeyRaw, options...)
}

func handleError(err error, status *C.int) *C.char {
	result := CallResult{
		Success: false,
		Message: err.Error(),
		Data:    nil,
	}

	// Error ignored because no unknown types to marshal
	raw, _ := json.Marshal(result)
	return C.CString(string(raw))
}

func handleSuccess(data interface{}, status *C.int) *C.char {
	result := CallResult{
		Success: true,
		Message: "",
		Data:    data,
	}

	raw, encodeErr := json.Marshal(result)

	// Should never happen; if triggered, the helper was called with bad data
	if encodeErr != nil {
		*status = -1
		return handleError(encodeErr, status)
	}

	return C.CString(string(raw))
}

// Given a normal API result, set a success pointer and return either the data or the error contents.
func format(data interface{}, err error, status *C.int) *C.char {

	if err != nil {
		*status = -1
		return handleError(err, status)
	}

	*status = 0
	return handleSuccess(data, status)
}

//export Free
func Free(pointer *C.char) {
	// C.free(unsafe.Pointer(pointer))
}

//export TestBridge
func TestBridge(name *C.char) *C.char {
	nameGo := C.GoString(name)
	return C.CString("Hello " + nameGo)
}

//
// -- AUTO GENERATED CODE FOLLOWS --
//

{{range .Signatures}}
//export {{.Name}}
func {{.Name}}(apiKey *C.char{{range .Params}}, {{.Name}} {{.CType}}{{end}}, status *C.int) *C.char {
	{{range .Params}}{{if or (eq .Type "string") (eq .Type "data")}}{{.Name}}Go := C.GoString({{.Name}})
	{{end}}{{end}}{{if ne .ParamDataName ""}}
	var parsed{{.ParamDataName}} api.{{.ParamDataType}}
	parseErr := json.Unmarshal([]byte({{.ParamDataName}}Go), &parsed{{.ParamDataName}})
	if parseErr != nil {
		return format(nil, parseErr, status)
	}
	{{end}}
	{{ $length := .LastResultIndex }}{{range $ind, $val := .Results}}{{.Name}}{{if lt $ind $length}}, {{end}}{{end}} := makeClient(apiKey).{{.Name}}({{ $length := .LastParamIndex }}{{range $ind, $val := .Params}}{{if eq $val.Type "data"}}&parsed{{end}}{{$val.Name}}{{if eq $val.Type "string"}}Go{{end}}{{if lt $ind $length}}, {{end}}{{end}})
	return format({{.ReturnDataName}}, err, status)
}
{{end}}
