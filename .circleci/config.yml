version: 2

jobs:
    build:
        # The local circleci binary does not support relative directories.
        # They plan to remove this limitation in the future.
        # Ref: https://circleci.com/docs/2.0/local-jobs/#relative-path-for-working_directory
        working_directory: "/workspace/src/flywheel.io/sdk"

        docker:
            # - image: buildpack-deps:zesty
            - image: flywheel/sdk-ci:sdk-ci-add-jq
              environment:
                # Enable the installation and use of junit XML output
                MakeGenerateJunit: "1"
                # These make local builds faster by virtue of the source directory mount.
                # Would be better to get caching in the local build environment and remove this section.
                # Ref: https://discuss.circleci.com/t/caching-in-the-local-2-0-environment/13542
                GIMME_ENV_PREFIX: "./.gimme/envs"
                GIMME_VERSION_PREFIX: "./.gimme/versions"

            - image: scitran/core:nginx-unit
              environment:
                SCITRAN_CORE_DRONE_SECRET: "change-me"
        steps:
            - checkout

            - restore_cache:
                key: sdk-golang-1-{{ checksum "make.sh"}}-{{ checksum "glide.lock" }}

            # This is a hack to prevent downloading glide / Junit on every file change when iterating locally.
            # Users can keep a copy of the glide binary in the repo folder and have that be used instead.
            # As before, it would be better to get caching in the local build environment...
            - run:
                name: "[Hack] Check for Local Glide / Junit"
                command: copy() { test -f ./.circleci/$1 -a -x ./.circleci/$1 && cp ./.circleci/$1 /workspace/bin/$1 || true; }; mkdir -p /workspace/bin; copy glide; copy go-junit-report

            - run:
                name: Install Dependencies
                command: ./make.sh glide install

            - run:
                name: Compile Standard Library
                command: ./make.sh prepareCrossBuild

            - save_cache:
                key: sdk-golang-1-{{ checksum "make.sh"}}-{{ checksum "glide.lock" }}
                paths:
                    - "./.gimme"
                    - "./.glide"
                    - "/workspace/bin"

            - run:
                name: Compile
                command: ./make.sh cross

            - run:
                name: Check formatting
                command: ./make.sh formatCheck

            - run:
                name: Wait for API
                command: ./make.sh go run .circleci/prepare-environment.go

            - run:
                name: Integration Tests
                command: ./make.sh test
                # command: ./make.sh test -run TestSuite/TestGetConfig
                environment:
                  SdkTestMode:     "integration"
                  SdkTestKey:      "localhost:80:insecure-key"
                  SdkTestProtocol: "http"

            # - run:
            #     name: Triage environment
            #     command: ./make.sh go run .circleci/triage-environment.go
            #     when: on_fail

            - run:
                name: Build Bridge
                command: ./bridge/make.sh

            - run:
                name: Build Wheel
                command: ./bridge/scripts/dist.sh

            - run:
                name: Test Wheel
                command: ./bridge/scripts/test-wheel.sh
                environment:
                  SdkTestKey: "localhost:80:insecure-key,InsecureUsePlaintext"
                  PYTHONDONTWRITEBYTECODE: "really"

            # - run:
            #     name: Upload dist, if tagged
            #     command: |
            #       if [ "$CIRCLE_TAG" ]; then
            #         ./bridge/scripts/upload-dist.sh "$GITHUB_AUTH_TOKEN" "$CIRCLE_TAG" "/workspace/src/flywheel.io/sdk/bridge/dist/python/wheelhouse";
            #       fi

            - run:
                name: Cleanup
                command: cd /workspace/bin; rm -f glide sdk go-junit-report
                when: always

            # CircleCI wants their 'store_test_results' path to be a folder; oblige them!
            - run:
                name: Test fiddling
                command: test -f .report.xml && ( mkdir -p circle-tests; mv .report.xml circle-tests/ ) || true
                when: always

            - store_test_results:
                path: circle-tests

            - store_artifacts:
                path: "/workspace/bin"
                destination: executable

            - store_artifacts:
                path: "/workspace/src/flywheel.io/sdk/bridge/dist"
                destination: builds

            - store_artifacts:
                path: "/workspace/src/flywheel.io/sdk/coverage.html"
                destination: coverage.html
